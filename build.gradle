buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()

        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:versions.springBoot")
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.90")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'info.solidsoft.pitest' version "1.5.1"
    id 'jacoco'
    id 'io.franzbecker.gradle-lombok' version '1.14'
    id 'org.owasp.dependencycheck' version '5.3.0'
    id 'org.sonarqube' version '2.7.1'
    id 'org.springframework.boot' version '2.2.6.RELEASE'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.serenity-bdd.aggregator'

group = 'uk.gov.hmcts.reform.finrem'
version = '3.0.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8
jar.archiveName = 'finrem-evidence-management-client-api.jar'

bootJar {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
    archiveName 'finrem-evidence-management-client-api.jar'
}


sourceSets {
    testSmoke {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/integrationTest/java')
        }
        resources {
            srcDir('src/integrationTest/resources')
        }
    }
}

dependencies {
    integrationTestCompile(sourceSets.test.output)
}

mainClassName = 'uk.gov.hmcts.reform.emclient.EvidenceManagementClientApplication'

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

repositories {
    mavenLocal()
    jcenter()

    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url "https://repo1.maven.org/maven2/" }
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
}

distributions {
  main {
    contents {
      from(file("$projectDir/lib/AI-Agent.xml")) {
        into "lib"
      }
    }
  }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

pitest {
    targetClasses.set(['uk.gov.hmcts.reform.emclient.*'])
    excludedClasses.set(['uk.gov.hmcts.reform.emclient.health.*', 'uk.gov.hmcts.reform.emclient.configuration.*', 'uk.gov.hmcts.reform.emclient.response.*'])
    excludedTestClasses.set(['uk.gov.hmcts.reform.emclient.functional.*'])
    threads.set(4)
    outputFormats.set(['XML', 'HTML'])
    timestampedReports.set(false)
    mutationThreshold.set(50)
}


checkstyle.toolVersion = '8.29'
checkstyle.configFile = new File(rootDir, "checkstyle.xml")

// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
}

def versions = [
        commonsBeanUtils                        : '1.9.4',
        commonsIo                               : '2.5',
        commonsLang3                            : '3.9',
        guava                                   : '28.1-jre',
        hibernate                               : '6.0.5.Final',
        javaxValidation                         : '2.0.0.Final',
        jaywayJsonPath                          : '2.2.0',
        junit                                   : '4.12',
        lombok                                  : '1.16.18',
        reformHealth                            : '0.0.5',
        reformPropertiesVolume                  : '0.0.4',
        reformsHttpProxySpringBootAutoconfigure : '1.1.0',
        reformLogging                           : '5.1.1',
        restAssured                             : '3.3.0',
        serenity                                : '2.0.90',
        serenityCucumber                        : '1.9.49',
        serviceTokenGenerator                   : '3.0.0',
        skyscreamer                             : '1.2.3',
        springfoxSwagger                        : '3.0.0-SNAPSHOT',
        springCloud                             : '2.2.1.RELEASE',
        springHateoas                           : '1.0.2.RELEASE',
        springRetry                             : '1.2.5.RELEASE',
        tomcat                                  : '9.0.36',
        unirestJava                             : '1.4.9',
        wiremock                                : '2.8.0'
]

dependencyManagement {
    dependencies {
        // CVE-2019-10086
        dependency group: 'commons-beanutils', name: 'commons-beanutils', version: versions.commonsBeanUtils
        // CVE-2018-10237
        dependency group: 'com.google.guava', name: 'guava', version: versions.guava
        // CVE-2019-17563
        dependencySet(
                group: 'org.apache.tomcat.embed', version: versions.tomcat
        ) {
            entry 'tomcat-embed-core'
            entry 'tomcat-embed-el'
            entry 'tomcat-embed-websocket'
        }
    }
}

dependencies {
    implementation group: 'com.jayway.jsonpath', name: 'json-path-assert', version: versions.jaywayJsonPath
    implementation group: 'commons-io', name: 'commons-io', version: versions.commonsIo
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
    implementation group: 'io.springfox', name: 'springfox-spring-webmvc', version: versions.springfoxSwagger
    implementation group: 'javax.validation', name: 'validation-api', version: versions.javaxValidation
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    implementation group: 'org.hibernate', name: 'hibernate-validator', version: versions.hibernate
    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    implementation group: 'org.springframework.boot', name: 'spring-boot-devtools'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: versions.springCloud
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-ribbon', version: versions.springCloud
    implementation group: 'org.springframework.hateoas', name: 'spring-hateoas', version: versions.springHateoas
    implementation group: 'org.springframework.retry', name: 'spring-retry', version: versions.springRetry
    implementation group: 'org.springframework.security', name: 'spring-security-rsa'
    implementation group: 'org.springframework.security', name:'spring-security-crypto'

    implementation group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: versions.reformHealth
    implementation group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: versions.reformsHttpProxySpringBootAutoconfigure
    implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-httpcomponents', version: versions.reformLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'logging-spring', version: versions.reformLogging
    implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: versions.reformPropertiesVolume
    implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: versions.serviceTokenGenerator

    testImplementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testImplementation group: 'com.github.tomakehurst', name:'wiremock', version: versions.wiremock
    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.sprintBoot) {
        exclude(module: 'commons-logging')
    }

    //integration test
    integrationTestCompile group: 'com.mashape.unirest', name: 'unirest-java', version: versions.unirestJava
    integrationTestCompile group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    integrationTestCompile group: 'junit', name: 'junit', version: versions.junit
    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-cucumber', version: versions.serenityCucumber
    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    integrationTestCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    integrationTestCompile group: 'org.apache.commons', name: 'commons-lang3', version: versions.commonsLang3
    integrationTestCompile group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    integrationTestCompile group: 'org.skyscreamer', name:'jsonassert', version: versions.skyscreamer
    integrationTestCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    integrationTestCompile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    integrationTestCompile group: 'uk.gov.hmcts.reform', name:'service-auth-provider-client', version: versions.serviceTokenGenerator

    testSmokeImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    testSmokeImplementation sourceSets.main.runtimeClasspath
    testSmokeImplementation sourceSets.test.runtimeClasspath

    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    integrationTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
}

test {
    exclude '**/*FunctionalTest.class'
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    testClassesDirs = sourceSets.testSmoke.output.classesDirs
    classpath = sourceSets.testSmoke.runtimeClasspath
}

task functional(type: Test, description: 'Runs the functional tests', group: 'Verification') {
        setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
        setClasspath(sourceSets.integrationTest.runtimeClasspath)
}

task printVersion {
    doLast {
        print project.version
    }
}

task developAddReleaseSuffix() {
    version = "${version}-SNAPSHOT"
}

def sonarExclusions = [
        '**uk/gov/hmcts/reform/emclient/exception/*',
        '**uk/gov/hmcts/reform/emclient/configuration/*',
        '**uk/gov/hmcts/reform/emclient/response/*',
        '**uk/gov/hmcts/reform/emclient/service/UploadRequestBuilder.java',
        '**uk/gov/hmcts/reform/emclient/exception/TemporaryStoreFailureException.java',
        '**uk/gov/hmcts/reform/emclient/application/EvidenceManagementClientApplication.java'
]

sonarqube {
    properties {
        property "sonar.projectName", "Financial Remedy :: Evidence Management Client API"
        property "sonar.projectKey", "FinancialRemedyEvidenceManagementClientApi"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.exclusions", sonarExclusions.join(", ")
    }
}

project.tasks['sonarqube'].dependsOn test, jacocoTestReport
project.tasks['sonarqube'].group = "Verification"

task addReleaseSuffixToDevelop() {
    version = "${version}-SNAPSHOT"
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled true
        html.enabled true
        xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

def debug = System.getProperty("debug")
run {
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5010']
    }
}
